CMAKE_MINIMUM_REQUIRED(VERSION 3.14)

# basename
GET_FILENAME_COMPONENT(PROJECT_BASENAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
SET(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/output)

# print
MESSAGE(STATUS "CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}")
MESSAGE(STATUS "Project basename: ${PROJECT_BASENAME}")
MESSAGE(STATUS "Install dir: ${CMAKE_INSTALL_PREFIX}")

PROJECT(${PROJECT_BASENAME} VERSION 0.1.0)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
ADD_COMPILE_OPTIONS( -Wall -g )
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

# googletest 빌드
include(FetchContent)
FetchContent_Declare(
   googletest
   GIT_REPOSITORY https://github.com/google/googletest.git
   GIT_TAG main  # Use the main branch to get the latest version
)
FetchContent_MakeAvailable(googletest)
SET(GTEST_LIBRARIES gmock gmock_main gtest gtest_main)

# lib
FILE(GLOB LIB_SRC_FILES
   ${CMAKE_CURRENT_SOURCE_DIR}/lib/*.cpp
)
FILE(GLOB LIB_HDR_FILES
   ${CMAKE_CURRENT_SOURCE_DIR}/lib/*.h
)

SET(LIB_NAME ${CMAKE_PROJECT_NAME})
ADD_LIBRARY(${LIB_NAME} STATIC ${LIB_SRC_FILES})

# Test
FILE(GLOB TEST_FILES
   ${CMAKE_CURRENT_SOURCE_DIR}/unittest/*.cpp
)
SET(TEST_TARGET_NAME Test${CMAKE_PROJECT_NAME})
ADD_EXECUTABLE(${TEST_TARGET_NAME} ${TEST_FILES})
TARGET_LINK_LIBRARIES(${TEST_TARGET_NAME}
   ${GTEST_LIBRARIES}
   ${LOCAL_EXTERNAL_LIBS}
   ${LIB_NAME}
)
ADD_DEPENDENCIES(${TEST_TARGET_NAME}
   ${GTEST_LIBRARIES}
   ${LOCAL_EXTERNAL_LIBS}
   ${LIB_NAME}
)

# CTest 지원. keep this position
enable_testing()
include(GoogleTest)
gtest_discover_tests(${TEST_TARGET_NAME})
